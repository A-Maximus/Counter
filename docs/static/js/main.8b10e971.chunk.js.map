{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Counter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","counter","addC","toConsumableArray","push","setState","i","console","log","c","_this2","react_default","a","createElement","className","onClick","addCounter","bind","map","key","increment","decrement","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOA8DmBA,qBAxDjB,SAAAA,EAAaC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,QAAS,IAHMR,4EASrB,IAAIS,EAAKR,OAAAS,EAAA,EAAAT,CAAKE,KAAKI,MAAMC,SACzBC,EAAKE,KAAK,GACVR,KAAKS,SAAS,CAACJ,QAASC,sCAKZI,GACRC,QAAQC,IAAI,4BACZ,IAAIC,EAACf,OAAAS,EAAA,EAAAT,CAAOE,KAAKI,MAAMC,SACvBQ,EAAEH,KACFV,KAAKS,SAAS,CAAEJ,QAASQ,sCAIjBH,GACRC,QAAQC,IAAI,4BACZ,IAAIC,EAACf,OAAAS,EAAA,EAAAT,CAAOE,KAAKI,MAAMC,SACvBQ,EAAEH,KACFV,KAAKS,SAAS,CAAEJ,QAASQ,qCAKlB,IAAAC,EAAAd,KACP,OAEEe,EAAAC,EAAAC,cAAA,OAAKC,UAAW,QACZH,EAAAC,EAAAC,cAAA,UAAQC,UAAW,cAAcC,QAAUnB,KAAKoB,WAAWC,KAAKrB,OAAhE,eACAA,KAAKI,MAAMC,QAAQiB,IAAI,SAACT,EAAGH,GAAJ,OAErBK,EAAAC,EAAAC,cAAA,OAAKM,IAAKb,EAAGQ,UAAU,WACrBH,EAAAC,EAAAC,cAAA,UAAKJ,GAELE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAAWC,QAAUL,EAAKU,UAAUH,KAAKP,EAAMJ,IAAjE,aACAK,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAAWC,QAAUL,EAAKW,UAAUJ,KAAKP,EAAMJ,IAAjE,wBA7CQgB,cCOFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8b10e971.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\n\nclass Counter extends Component {\n  constructor (props){\n    super(props);\n    this.state = {\n      counter: []\n    };\n  }\n\n\n  addCounter() {\nlet addC= [...this.state.counter];\naddC.push(0);\nthis.setState({counter: addC});\n  }\n\n\n\n  increment(i)  { \n    console.log(\"incrementing has occured\");\n    let c = [...this.state.counter];\n    c[i]++;\n    this.setState({ counter: c });\n  }\n\n\n  decrement(i)  { \n    console.log(\"decrementing has occured\");\n    let c = [...this.state.counter];\n    c[i]--;\n    this.setState({ counter: c });\n  }\n\n\n  \n  render() {\n    return (\n      \n      <div className= \"main\">\n          <button className= \"add-counter\" onClick= {this.addCounter.bind(this)}>Add Counter</button>\n        { this.state.counter.map((c, i) =>\n          \n            <div key={i} className=\"choices\">\n              <h1>{c}</h1>\n\n              <button className=\"increase\" onClick= {this.increment.bind(this, i)}>Increment</button>\n              <button className=\"decrease\" onClick= {this.decrement.bind(this, i)}>Decrement</button>\n            </div>\n          \n          \n          )\n        }\n       </div>\n       );\n       \n      }\n    }\n    \n    export default Counter;\n    ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}